<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>antoineB's blog: Posts tagged 'php'</title>
  <description>antoineB's blog: Posts tagged 'php'</description>
  <link>http://antoineB.github.io/tags/php.html</link>
  <lastBuildDate>Sun, 05 Mar 2017 13:25:10 UT</lastBuildDate>
  <pubDate>Sun, 05 Mar 2017 13:25:10 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Ideas of a match form for PHP</title>
   <link>http://antoineB.github.io/blog/2017/03/05/ideas-of-a-match-form-for-php/?utm_source=php&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-antoineB-github-io:-blog-2017-03-05-ideas-of-a-match-form-for-php</guid>
   <pubDate>Sun, 05 Mar 2017 13:25:10 UT</pubDate>
   <author>antoine</author>
   <description>
&lt;p class="lead"&gt;This post explore the idea of how would look like if pattern matching would be added to PHP.&lt;/p&gt;

&lt;br /&gt;

&lt;p&gt;And by pattern matching i actually mean racket&amp;rsquo;s &lt;a href="https://docs.racket-lang.org/reference/match.html?q=match#%28form._%28%28lib._racket%2Fmatch..rkt%29._match%29%29"&gt;match&lt;/a&gt; form.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id="an-example"&gt;An example&lt;/h2&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Maison {
    public $voiture = 1;
    public $camion = 2;
    public function moreVoiture($value) { return $this-&amp;gt;voiture + $value; }
}


match($someExpr) {
    case 12:
        var_dump(12);
        break;
    case "toto": 
        var_dump("toto");
        break;
    case (int) as $someVar:
        var_dump($someVar);
        break;
    case instanceof Maison(-&amp;gt;voiture =&amp;gt; 1, -&amp;gt;camion =&amp;gt; (int) as $r) as $result:
        var_dump($result);
        var_dump($r);
        break;
    case instanceof Maison(-&amp;gt;moreVoiture(2) =&amp;gt; 3, -&amp;gt;camion =&amp;gt; instanceof Maison() as $r) as $result:
        var_dump($result);
        var_dump($r);
        break;
    case [1, 2, (mixed) as $third]:
        var_dump($third);
        break;
    case [...(mixed), (mixed) as $last]: 
        var_dump($last);
        break;
    default:
        break;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Explaining of the behaviors involved here:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;12&lt;/code&gt;, &lt;code&gt;&amp;ldquo;toto&amp;rdquo;&lt;/code&gt; or any scalar will be check with  &lt;code&gt;===&lt;/code&gt;.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;(int)&lt;/code&gt;, &lt;code&gt;(string)&lt;/code&gt; will match against a type following  PHP rules.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;(mixed)&lt;/code&gt; is a new rule meaning everything, wildcard. Often written  &lt;code&gt;_&lt;/code&gt; in other pattern matching.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt; will check for &lt;code&gt;instanceof&lt;/code&gt; straight  forward. It use &lt;code&gt;-&amp;gt;property&lt;/code&gt; and &lt;code&gt;-&amp;gt;method()&lt;/code&gt; to  make a distinction between properties and methods.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;&amp;hellip;&lt;/code&gt; is used in array to express 0 or more.&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;as&lt;/code&gt; is used to introduce new variable in the code.&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="the-grammar"&gt;The grammar&lt;/h2&gt;

&lt;p&gt;A kind of yacc grammar, terminals are indicated in quotes and r&amp;rsquo;&amp;rsquo; for regex.&lt;/p&gt;

&lt;div class="brush: yacc"&gt;
 &lt;pre&gt;&lt;code&gt;pattern:
    | scalar as_pattern
    | type as_pattern
    | 'instanceof' classname '(' object_list ')' as_pattern
    | array_pattern as_pattern
    ;

type:
    | '(bool)'
    | '(int)'
    | '(string)'
    | '(resource)'
    | '(float)' 
    | '(array)'
    | '(object)'
    | '(mixed)'
    ;

scalar:
    | r'[0-9]+' // integer
    | r'[0-9]*.[0-9]*' // float
    | r"'[^']*'"
    | r'"[^"]*"' //string
    | true
    | false
    | null
    ;

array_list:
    | pattern ',' array_list
    | pattern
    | '...' pattern ',' array_list
    | '...' pattern
    |
    ;

array_pattern:
    | 'array' '(' array_list ')'
    | '[' array_list ']'
    | 'array' '(' array_key_list ')'
    | '[' array_key_list ']'
    ;

object_list:
    | r'-&amp;gt;[a-zA-Z0-9_]+' '=&amp;gt;' pattern
    | r'-&amp;gt;[a-zA-Z0-9_]+' '(' any_php_expr ')' '=&amp;gt;' pattern
    ;

variable:
    | r'$[a-zA-z0-9_]+' // like $someVar
    ;

as_pattern:
    | // empty
    | 'as' variable
    ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="implementing-a-poc"&gt;Implementing a P.O.C.&lt;/h2&gt;

&lt;p&gt;Like &lt;code&gt;match&lt;/code&gt;, a macro that spit out racket code, I will implement this as a pre-processor that spit out valid PHP. This is not a usable solution because it breaks line number in errors messages. I have started to write this 
 &lt;abbr title="Proof Of Concept"&gt;POC&lt;/abbr&gt; in the PHP VM (to keep correct line number) but the whole process was slow and cumbersome (&lt;a href="/code/poc_vm.patch"&gt;here is the diff&lt;/a&gt; that pave the basics form commit 85b9055a86 [aka PHP 7.1]). The other problem is that the generated code rely on 3 global variables and the whole thing will turn bad if you mess with them inside a match.&lt;/p&gt;

&lt;p&gt;Some quick glance at how this is done.&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

match (expr) {
    case pattern: statements... break;
    default: // like switch
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Will ouput:&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

// If there is a match before every global variables are re-initialized.

// Used to eval expression just once.
$__MATCH__expr = expr;
// Used to store variables and populate (extract) the current scope with them
only if the whole clause match.
$__MATCH__variables = []; // of shape 'variableName' =&amp;gt; value.
$__MATCH__result = true;

// Skeleton of any pattern clause.
$__MATCH__case0 = function ($__MATCH__expr) use (&amp;amp;$__MATCH__variables, &amp;amp;$__MATCH__result) {
    $__MATCH__inner_variables = [];
    $__MATCH__result = true;
    pattern_code;
    if ($__MATCH__result == true) {
        $__MATCH__variables = array_merge($__MATCH__variables, $__MATCH__inner_variables);
    }
    return $__MATCH__result;
}

// Use switch because match has the same behavior of switch regarding break.
switch (true) {
  case $__MATCH__case0($__MATCH__expr):
      extract($__MATCH__variables);
      statements;
      break; // or not
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another example:&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

// for case (int) as $someVar: var_dump($someVar); break;

$__MATCH__case2 = function ($__MATCH__expr) use (&amp;amp;$__MATCH__variables, &amp;amp;$__MATCH__result) {
    $__MATCH__inner_variables = [];
    $__MATCH__result = true;
    if ($__MATCH__result === true) {
        if (is_int($__MATCH__expr)) {
            $__MATCH__inner_variables['someVar'] = $__MATCH__expr;
        } else {
            $__MATCH__result = false;
        }
    } 
    if ($__MATCH__result === true) {
        $__MATCH__variables = array_merge($__MATCH__variables, $__MATCH__inner_variables);
    }
    return $__MATCH__result;
}

// and in the switch

// case $__MATCH__case0($__MATCH__expr):
//     extract($__MATCH__variables);
//     var_dump($someVar); break;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don&amp;rsquo;t go into other examples you get the idea, see &lt;a href="/code/matchphp.rkt"&gt;the preprocessor&lt;/a&gt; or &lt;a href="/code/matchphpexample.php"&gt;an example&lt;/a&gt; and &lt;a href="/code/matchphpexample_output.php"&gt;its output&lt;/a&gt; for more.&lt;/p&gt;

&lt;h2 id="shortcomings"&gt;Shortcomings&lt;/h2&gt;

&lt;p&gt;The above grammar misses several elements from PHP and racket match.&lt;/p&gt;

&lt;h3 id="there-is-no-array-key"&gt;There is no array key&lt;/h3&gt;

&lt;div class="brush: yacc"&gt;
 &lt;pre&gt;&lt;code&gt;string_or_number:
    | r'[0-9]+' // integer
    | r'[0-9]*.[0-9]*' // float
    | r"'[^']*'"
    | r'"[^"]*"' //string
    ;
    
string_or_number_type:
    | '(int)'
    | '(string)'
    | '(mixed)'
    ;

array_list:
    | pattern ',' array_list
    | pattern
    | '...' pattern ',' array_list
    | '...' pattern
    | string_or_number =&amp;gt; pattern ',' array_list
    | string_or_number =&amp;gt; pattern
    | '...' string_or_number_type =&amp;gt; pattern ',' array_list
    | '...' string_or_number_type =&amp;gt; pattern
    |
    ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="only-scalar-allowed"&gt;Only Scalar allowed&lt;/h3&gt;

&lt;p&gt;If general purpose PHP expression are allowed it is unclear how it will possible to and (&amp;amp;&amp;amp; and also negating !) two clauses without adding a new keyword. The or case is simple it just need to put several case one after the other without break in between.&lt;/p&gt;

&lt;p&gt;I see only 4 solution:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Adding a new keyword like &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/li&gt;
 &lt;li&gt;Removing expression all together.&lt;/li&gt;
 &lt;li&gt;Removing and not all together.&lt;/li&gt;
 &lt;li&gt;Escape expression with something like &lt;code&gt;eval&lt;/code&gt; example &lt;code&gt;case eval(1 + 1) &amp;amp;&amp;amp; eval($obj-&amp;gt;getStuff()):&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;I will bet on now for removing and not.&lt;/p&gt;

&lt;h3 id="traversable-and-object-behaving-as-array"&gt;Traversable and object behaving as array&lt;/h3&gt;

&lt;p&gt;I would choose still having &lt;code&gt;array&lt;/code&gt; match to check for element be an array. And introduce a new rule like &lt;code&gt;&amp;lsquo;instanceof&amp;rsquo; &amp;lsquo;Traversable&amp;rsquo; &amp;rsquo;(&amp;rsquo; array_list &amp;rsquo;)&amp;rsquo;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="where-are--and-app-from-rackets-match"&gt;Where are &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;app&lt;/code&gt; from racket&amp;rsquo;s match&lt;/h3&gt;

&lt;p&gt;For &lt;code&gt;?&lt;/code&gt; it is possible to add a guard:&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

// case (mixed) as $pattern if (is_something($pattern)):

// $pattern is implicit
// case (mixed) if (is_something($pattern)):

// even (mixed) could be implicit
// case if (is_something($pattern)):&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go a bit deeper into implicit &lt;code&gt;$pattern&lt;/code&gt;&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

match ([1]) {
    case [(mixed) if (var_dump($pattern) || true)] if (var_dump($pattern) || true):
}

// will print
// 1
// array(1)

// $pattern is the current part being matched.

// Ifs are executed depth first search.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the &lt;code&gt;app&lt;/code&gt; parts:&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;// will match [1, 'stuff']
// the next pattern is the return value of evaluated expression.
// case [1, eval(preg*match('/stuff/', $pattern, $m)) =&amp;gt; 1]:

// will match [1, 'stu'] but not [1, 'stuff']
// case [1, eval(preg*match('/stu(ff)?/', $pattern, $m)) use($m) =&amp;gt; [(mixed)]]:
// use($m) substitute $pattern value with $m's value.

// If a callable is given to eval so it is called
// case [1, eval(function ($pattern) { preg_match('/stu(ff)?/', $pattern, $m); return $m; }) =&amp;gt; [(mixed)]]:

// because the syntax with eval could be confusing with a php expression and
// it need to add 'use', another solution is to only allow the function syntax.

// case [1, function ($pattern) { preg_match('/stu(ff)?/', $pattern, $m); return $m; } =&amp;gt; [(mixed)]]:

// verbose but the clearer for me.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="conclusion-with-whole-hypothetical-grammar"&gt;Conclusion with whole hypothetical grammar&lt;/h3&gt;

&lt;p&gt;Regarding previous point here is a grammar that sum it up (contrary to the previous one I didn&amp;rsquo;t check if it didn&amp;rsquo;t run into LLAR conflicts).&lt;/p&gt;

&lt;div class="brush: yacc"&gt;
 &lt;pre&gt;&lt;code&gt;pattern:
    | apply_pattern pattern_without_apply
    | pattern_without_apply
    ;

pattern_without_apply:
    | scalar as_pattern if_pattern
    | type as_pattern if_pattern
    | 'instanceof' 'Traversable' '(' array_list ')' as_pattern if_pattern
    | 'instanceof' classname '(' object_list ')' as_pattern if_pattern
    | array_pattern as_pattern if_pattern
    | php_expr as_pattern if_pattern // hope it doesn't conflict with the rest, array() for exemple
    ;

type:
    | '(bool)'
    | '(int)'
    | '(string)'
    | '(resource)'
    | '(float)' 
    | '(array)'
    | '(object)'
    | '(mixed)'
    ;

scalar:
    | r'[0-9]+' // integer
    | r'[0-9]*.[0-9]*' // float
    | r"'[^']*'"
    | r'"[^"]*"' //string
    | true
    | false
    | null
    ;

array_list:
    | pattern ',' array_list
    | pattern
    | '...' pattern ',' array_list
    | '...' pattern
    |
    ;

array_pattern:
    | 'array' '(' array_list ')'
    | '[' array_list ']'
    | 'array' '(' array_key_list ')'
    | '[' array_key_list ']'
    ;

object_list:
    | r'-&amp;gt;[a-zA-Z0-9_]+' '=&amp;gt;' pattern
    | r'-&amp;gt;[a-zA-Z0-9_]+' '(' any_php_expr ')' '=&amp;gt;' pattern
    ;

variable:
    | r'$[a-zA-z0-9_]+' // like $someVar
    ;

as_pattern:
    | // empty
    | 'as' variable
    ;
    
if_pattern:
    | // empty
    | 'if' '(' php_expr ')'
    ;

apply_pattern:
    | 'function' '(' variable ')' 'use' '(' stuff ')' '{' statements '}' '=&amp;gt;'
    ;

array_key:
    | apply_pattern php_expr as_pattern if_pattern
    | php_expr as_pattern if_pattern
    ;

array_key_ellipsis:
    | '(int)' as_pattern if_pattern 
    | '(string)' as_pattern if_pattern
    | '(mixed)' as_pattern if_pattern
    | apply_pattern pattern_without_apply
    ;

array_list:
    | pattern ',' array_list
    | pattern
    | '...' pattern ',' array_list
    | '...' pattern
    | array_key =&amp;gt; pattern ',' array_list
    | array_key =&amp;gt; pattern
    | '...' array_key_ellipsis =&amp;gt; pattern ',' array_list
    | '...' array_key_ellipsis =&amp;gt; pattern
    |
    ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It adds most of the feature from racket&amp;rsquo;s &lt;code&gt;match&lt;/code&gt; without adding any new keyword. The missing element are &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;regexp&lt;/code&gt; (very easy to add with a new keyword like &lt;code&gt;&amp;lsquo;preg_match&amp;rsquo; &amp;rsquo;/regex/&amp;rsquo; &amp;rsquo;=&amp;gt;&amp;rsquo; pattern&lt;/code&gt;) and &lt;code&gt;..k&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="the-whole-grammar-if-phpexpr-is-removed-from-allowed-pattern"&gt;The whole grammar if php_expr is removed from allowed pattern&lt;/h4&gt;

&lt;div class="brush: yacc"&gt;
 &lt;pre&gt;&lt;code&gt;pattern:
    | apply_pattern pattern_without_apply
    | pattern_without_apply
    ;

just_pattern:
    | variable
    | scalar 
    | type 
    | 'instanceof' 'Traversable' '(' array_list ')'
    | 'instanceof' classname '(' object_list ')'
    | array_pattern
    ;
    
pattern_without_apply:
    | just_pattern scalar as_pattern if_pattern
    | pattern '&amp;amp;&amp;amp;' pattern
    | pattern '||' pattern 
    | '(' pattern ')' as_pattern if_pattern // resolve ambiguity with as_pattern with '||' and '&amp;amp;&amp;amp;' rule.
    | pattern 'and' just_pattern as_pattern if_pattern
    | pattern 'or' just_pattern as_pattern if_pattern
    | '!' pattern
    ;

type:
    | '(bool)'
    | '(int)'
    | '(string)'
    | '(resource)'
    | '(float)' 
    | '(array)'
    | '(object)'
    | '(mixed)'
    ;

scalar:
    | '==' scalar // weak checking instead of strong one by default
    | r'[0-9]+' // integer
    | r'[0-9]*.[0-9]*' // float
    | r"'[^']*'"
    | r'"[^"]*"' //string
    | true
    | false
    | null
    ;

array_list:
    | pattern ',' array_list
    | pattern
    | '...' pattern ',' array_list
    | '...' pattern
    |
    ;

array_pattern:
    | 'array' '(' array_list ')'
    | '[' array_list ']'
    | 'array' '(' array_key_list ')'
    | '[' array_key_list ']'
    ;

object_list:
    | r'-&amp;gt;[a-zA-Z0-9_]+' '=&amp;gt;' pattern
    | r'-&amp;gt;[a-zA-Z0-9_]+' '(' any_php_expr ')' '=&amp;gt;' pattern
    ;

variable:
    | r'$[a-zA-z0-9_]+' // like $someVar
    ;

as_pattern:
    | // empty
    | 'as' variable
    ;
    
if_pattern:
    | // empty
    | 'if' '(' php_expr ')'
    ;

apply_pattern:
    | 'function' '(' variable ')' 'use' '(' stuff ')' '{' statements '}' '=&amp;gt;'
    ;

array_key:
    | apply_pattern php_expr as_pattern if_pattern
    | php_expr as_pattern if_pattern
    ;

array_key_ellipsis:
    | '(int)' as_pattern if_pattern 
    | '(string)' as_pattern if_pattern
    | '(mixed)' as_pattern if_pattern
    | apply_pattern pattern_without_apply
    ;

array_list:
    | pattern ',' array_list
    | pattern
    | '...' pattern ',' array_list
    | '...' pattern
    | array_key =&amp;gt; pattern ',' array_list
    | array_key =&amp;gt; pattern
    | '...' array_key_ellipsis =&amp;gt; pattern ',' array_list
    | '...' array_key_ellipsis =&amp;gt; pattern
    |
    ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one allow weak checking, negating pattern, and of pattern and &lt;code&gt;$var&lt;/code&gt; as a shortcut for &lt;code&gt;(mixed) as $var&lt;/code&gt;.&lt;/p&gt;</description></item>
  <item>
   <title>transpile php to javascript</title>
   <link>http://antoineB.github.io/blog/2015/08/29/transpile-php-to-javascript/?utm_source=php&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-antoineB-github-io:-blog-2015-08-29-transpile-php-to-javascript</guid>
   <pubDate>Sat, 29 Aug 2015 15:27:34 UT</pubDate>
   <author>antoine</author>
   <description>
&lt;p class="lead"&gt;Some ideas on how to build a php to javascript transpiler&lt;/p&gt;

&lt;br /&gt;

&lt;p&gt;I spend a good part of my work time in front of php or javascript code, so I wonder what will it be to compile php to javascript (in a browser context only). All of this is not tested it is just out of my head, I should have looked up how other have come up with problems like &lt;code&gt;yield&lt;/code&gt; but this would kill all interest.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Just some specifications of the top-level definition that will be used through all the post:&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;// php functions (indexed by full qualified name)
window.PHPFunction = {};
// constructors as js function
window.PHPConstructor = {};
// all the class indexed by full qualified name
window.PHPClass = {};
// all the rest of the stuff, type constructor, type cast function, etc...
window.PHP = {};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="types"&gt;Types&lt;/h1&gt;

&lt;p&gt;PHP type to javascript&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;string -&amp;gt; js string&lt;/li&gt;
 &lt;li&gt;float -&amp;gt; a new class PHP.Float&lt;/li&gt;
 &lt;li&gt;integer -&amp;gt; js number&lt;/li&gt;
 &lt;li&gt;bool -&amp;gt; bool&lt;/li&gt;
 &lt;li&gt;null -&amp;gt; null&lt;/li&gt;
 &lt;li&gt;undefined -&amp;gt; undefined&lt;/li&gt;
 &lt;li&gt;unassigned -&amp;gt; a singleton of a class PHP.UnAssigned&lt;/li&gt;
 &lt;li&gt;array -&amp;gt; a new class PHP.Array&lt;/li&gt;
 &lt;li&gt;object -&amp;gt; a javascript object instance of PHP.Object&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;There is not much thought to put into those choices maybe a wiser will try to have the maximum matching behavior between php &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt; and js counter parts or other strategies to reduce the overhead of type checking.&lt;/p&gt;

&lt;p&gt;The array in PHP is not just an array as you know so it can&amp;rsquo;t be mapped directly to the vanilla js Array class. For now the easy way is to define a specific class to handle all the case (hash table, local index change etc&amp;hellip;).&lt;/p&gt;

&lt;p&gt;Continuing with the number it&amp;rsquo;s necessary to introduce at least one new class to distinguish from Number the integer and the float.&lt;/p&gt;

&lt;p&gt;Giving us something like:&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;PHP = (function () {
    var UnAssigned = function () {};
    var UNASSIGNED = new UnAssigned;
    var Float = function (value) { this.value = value; };
    var Array = function () {};
    var Object = function () {};
    
    return {
        UNASSIGNED: UNASSIGNED,
        gettype: function (obj) {
            var type = typeof obj;
            if (type == 'string') {
                return 'string';
            }
            if (type == 'number') {
                return 'integer'
            }
            if (type == 'boolean') {
                return 'boolean';
            }
            if (obj instanceof Array) {
                return 'array';
            }
            if (obj instanceof Float) {
                return 'double';
            }
            if (obj instanceof Object) {
                return 'object';
            }
            if (obj === undefined || obj === null || obj === UNASSIGNED) {
                return null;
            }
            throw new String('hope it never happens');
        },
        js_to_php: function (obj) {
            if (obj instanceof window.Object) {
                if (obj instanceof window.String) {
                    return obj;
                }
                if (obj instanceof window.Array) {
                    return new PHP.Array(obj);
                }
                if (obj instanceof window.Number) {
                    if (window.Number.isInteger(obj)) {
                        return obj;
                    }
                    return new Float(obj);
                }
                return PHP.Object(obj);
            }
            if (obj == null || obj == undefined) {
                return obj;
            }
            var type = typeof obj;
            if (type == 'number') {
                if (window.Number.isInteger(obj)) {
                    return new window.Number(obj);
                }
                return new Float(obj);
            }
            if (type == 'string') {
                return new window.String(obj);
            }
            if (type == 'boolean') {
                return obj;
            }
            throw new String('hope it never happens');
        },
        // return a friendly datastructure from the point of view of javascript
        php_to_js: function (obj) {
            if (obj instanceof Float) {
                return Float.value;
            }
            if (obj === UNASSIGNED) {
                return undefined;
            }
            if (obj instanceof PHP.Array) {
                // convert hash table into a json
                // a window.Array otherwise
            }
            if (obj instanceof PHP.Object) {
                // return a json with public property and classname
            }
            // string, int, null, undefined, bool, array
            return obj;
        }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Maybe using the vanilla Array to treat the case where the array is actually an array indexed by ℕ⁰ with internal array pointer to 0 and expect a minor speedup.&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;var PHPArray = function () {
    // init
};

PHPArray.prototype = Object.create(Array.prototype);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="casting"&gt;Casting&lt;/h2&gt;

&lt;p&gt;This should be carefully done accordingly to the php &lt;a href="http://php.net/manual/en/types.comparisons.php"&gt;docs&lt;/a&gt;, the &lt;code&gt;(bool)&lt;/code&gt; operator as an example:&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;PHP.cast_bool = function (obj) {
  if (obj === false) {
      return false;
  }
  if (obj === '' || obj === '0') {
      return false;
  }
  if (obj === null) {
  return false;
  }
  if (obj === undefined) {
      return false;
  }
  if (obj === 0) {
      return false;
  }
  if (obj instanceof UNASSIGNED) {
      return false;
  }
  if (obj instanceof PHP.Array &amp;amp;&amp;amp; PHP.empty(obj)) {
      return false;
  }
  return true;
  }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="mapping-variable-name"&gt;Mapping variable name&lt;/h1&gt;

&lt;p&gt;The mapping between php and javascript of variable could be direct for instance if you declare a &lt;code&gt;$abc = 12&lt;/code&gt; the js will be &lt;code&gt;var abc = Number(12)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But there is two exception &lt;code&gt;get_defined_vars()&lt;/code&gt; and &lt;code&gt;extract()&lt;/code&gt; to please them both its necessary to use a js object to get track of variables and populate them directly.&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

function abc() {
  $a = 12;
  extract(['b' =&amp;gt; 12]);
  get_defined_vars();
  return someFun($a);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;PHPFunction.abc = function() {
  var state = {};
  PHP.states.push(state);
  state.a = 12;
  // extract and get_defined_vars will lookup into PHP.states[PHP.states.length - 1]
  PHPFunction.extract(PHP.array({'b' =&amp;gt; 12});
  PHPFunction.get_defined_vars();
  var result = PHPFunction.someFun(state.a);
  PHP.states.pop();
  return result;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;PHP.states[0]&lt;/code&gt; correspond to the globals variables. &lt;code&gt;PHP.states&lt;/code&gt; is necessary because &lt;code&gt;get_defined_vars&lt;/code&gt; and &lt;code&gt;extract&lt;/code&gt; could be call dynamically and will always be able to reference the states they relate two with &lt;code&gt;PHP.states[PHP.states.length &amp;ndash; 1]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the rest of the code example I will use a direct mapping for readability.&lt;/p&gt;

&lt;h2 id="optimization"&gt;optimization&lt;/h2&gt;

&lt;p&gt;If it can be proved that the current function code didn&amp;rsquo;t call &lt;code&gt;extract&lt;/code&gt; nor &lt;code&gt;get_defined_vars&lt;/code&gt; then a direct mapping could be used instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PHP.states[PHP.states.length &amp;ndash; 1]&lt;/code&gt; may be slower than &lt;code&gt;PHP.states[0]&lt;/code&gt; so the latter convention should be used where &lt;code&gt;0&lt;/code&gt; denote the current state and &lt;code&gt;PHP.states[PHP.states.length &amp;ndash; 1]&lt;/code&gt; the globals.&lt;/p&gt;

&lt;h1 id="class"&gt;Class&lt;/h1&gt;

&lt;p&gt;A class like:&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Abc interface A, B extends Edf {
    public $publicProp;
    private $privateProp;
    protected $protectedProp;

    public function __constructor($abc) { $this-&amp;gt;private = 2; }
    public function publicMeth() { }
    private function privateMeth() { }
    protected function protectedMeth() { }
}

$instance = new Abc(3);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Translate to:&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;PHPClass.Abc = {
    interface: [PHPClass.A, PHPCLass.B],
    extends PHPClass.Edf,
    private_method: {
        privateMeth: function () {}
    },
    public_method: {
        publicMeth: function () {}
    },
    protected_method: {
        protectedMeth: function () {}
    },
    destruct: null,
    statics: {},
    consts: {},
    doc_comments: {},
    invoke: null,
    __call: null,
    __set: null,
    __get: null,
    // other magic method
};

PHPConstructorBasic = false;

PHPConstructor.Abc = function () {
    this.public.publicProp = PHP.UNASSIGNED; // singleton
    this.protected.protectedProp = 1;
    this.private.privateProp = PHP.UNASSIGNED;
    this.meta = PHPClass.Abc;
    this.extends = null;

    PHPConstructorBasic = true;
    this.extends = new PHPConstructor.Edf();
    PHPConstructorBasic = false;

     if (PHPConstructorBasic !== true) {
        var abc = arguments[0];
        PHP.object_assign_property(this, this, 'privateProp', 2);
    }
};

PHPConstructor.Abc.prototype = Object.create(PHPConstructor.Edf.prototype);

PHPConstructor.Edf.prototype = Object.create(PHP.Object.prototype);

var instance = new PHPConstructor.Abc(3);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So a php class is divided into two parts the part that contain the methods definitions, interfaces and the like. Another part wich is the constructor of an instance which contain the properties, the class which is the instance of (with meta) and its parent instance, the scope of property is needed to be done explicitly by lack of scope in javascript.&lt;/p&gt;

&lt;p&gt;The constructor is composed of two parts the first that create the properties, assign their default value and call the save part of the constructor on the parent. The second is the user defined &lt;code&gt;__constructor&lt;/code&gt; code. The parent constructor should be called explicitly in php so that why there is the variable PHPConstructorBasic.&lt;/p&gt;

&lt;p&gt;Because I didn&amp;rsquo;t use the javascript inheritance, I need to wrap every use of &lt;code&gt;-&amp;gt;&lt;/code&gt; with a function. The fact I put &lt;code&gt;this&lt;/code&gt; twice is not a mistake it&amp;rsquo;s the current instance, it seems silly in that example, but useful when you do &lt;code&gt;$someVar = $this; $someVar-&amp;gt;privateThing&lt;/code&gt;. And then simulate the inheritance in the code in object_assign_property something like:&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;var object_assign_property = (function () {
    var assign = function (instance, propertyName, value) {
        if (instance.public[propertyName] !== undefined) {
            instance.public[propertyName] = value;
            return;
        }
        if (instance.protected[propertyName] !== undefined) {
            instance.protected[propertyName] = value;
            return;
        }
        if (instance.private[propertyName] !== undefined) {
            instance.private[propertyName] = value;
            return;
        }
        if (instance.extends === null) {
            throw new Exception('no property ' + propertyName);
        }
        assign(instance.extends, propertyName, value);
    };
    
    var assignPublic = function (instance, propertyName, value) {
        if (instance.public[propertyName] === undefined) {
            if (instance.extends !== null) {
                assignPublic(instance.extends, propertyName, value);
            } else {
                throw new Exception('no property ' + propertyName);
            }
        }
        instance.public[propertyName] = value;
    };
    
    return function (context, instance, propertyName, value) {
        if (context == instance) {
            assign(instance, propertyName, value);
        } else {
            assignPublic(instance, propertyName, value);
        }
    };
    })();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And method call:&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;var object_method_call = (function () {
    var callMeth = function (instance, methodName, args) {
        if (instance.meta.public[methodName] !== undefined) {
            return instance.meta.public[methodName].apply(instance, args);
        }
        if (instance.protected[methodName] !== undefined) {
            return instance.meta.protected[methodName].apply(instance, args);
        }
        if (instance.private[methodName] !== undefined) {
            return instance.meta.private[methodName].apply(instance, args);
        }
        if (instance.extends === null) {
            throw new Exception('no method ' + methodName);
        }
        callMeth(instance.extends, methodName, args);
    };
    
    var callMethPublic = function (instance, methodName, value, args) {
        if (instance.meta.public[methodName] === undefined) {
            if (instance.extends !== null) {
                callMethPublic(instance.extends, methodName, args);
            } else {
                throw new Exception('no method ' + methodName);
            }
        }
        instance.meta.public[methodName].apply(instance, args);
    };
    
    return function (context, instance, methodName, args) {
        if (context == instance) {
            callMeth(instance, methodName, args);
        } else {
            callMethPublic(instance, methodName, args);
        }
    };
    })();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="magic-method"&gt;Magic method&lt;/h2&gt;

&lt;p&gt;There is nothing to say, because every object access is wrap into a function the logic for magic method (&lt;code&gt;__get&lt;/code&gt;, &lt;code&gt;__set&lt;/code&gt;, &lt;code&gt;__call&lt;/code&gt;) could be added here.&lt;/p&gt;

&lt;p&gt;For the rest the logic happen in other function.&lt;/p&gt;

&lt;h2 id="type-hinting"&gt;Type hinting&lt;/h2&gt;

&lt;p&gt;Just add the check where relevant.&lt;/p&gt;

&lt;h2 id="self-static-and-parent"&gt;Self, static and parent&lt;/h2&gt;

&lt;p&gt;Assume in class Abc, then:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;&lt;code&gt;self&lt;/code&gt; translate to &lt;code&gt;PHPClass.Abc&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;parent&lt;/code&gt; translate to &lt;code&gt;PHPClass.Abc.extend&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;static&lt;/code&gt; translate to &lt;code&gt;this.meta&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;h2 id="class-definition-correctness"&gt;Class definition correctness&lt;/h2&gt;

&lt;p&gt;The check if a given class implement its interface&amp;rsquo;s methods or not is checked at compile time, so no javascript involved.&lt;/p&gt;

&lt;h2 id="optimization"&gt;Optimization&lt;/h2&gt;

&lt;p&gt;If it can prove which method will be call then the &lt;code&gt;object_method_call&lt;/code&gt; become useless and the direct access to the function can be used, and this could be done a lot.&lt;/p&gt;

&lt;h1 id="exception-and-errors"&gt;Exception and errors&lt;/h1&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

try {}
catch(Abc $a) {}
catch(Edf $e) {}
finally {}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;try {}
catch(e) {
  if (e instanceof PHPConstructor.Abc) {}
  if (e instanceof PHPConstructor.Edf) {}
  finallyCode()
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the &lt;code&gt;set_exception_handler&lt;/code&gt; the complete generate code need to be wrapped inside a try that catch on PHP.Exception and apply handler if there is. By the way &lt;code&gt;exit()&lt;/code&gt; and &lt;code&gt;die()&lt;/code&gt; will be implemented respectively with &lt;code&gt;throw new PHP.Exit()&lt;/code&gt; and &lt;code&gt;throw new PHP.Die()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For errors this is different because errors don&amp;rsquo;t stop the execution of the code, i don&amp;rsquo;t know all the cases where error happen but the only one I see demanding extra work is the access to an undefined variable.&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;echo $a;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;// keep in mind that like javascript php hoist its variables, so scan the code,
// find all variable, declare them all with UNASSIGNED
var a = PHP.UNASSIGNED;
PHP.echo((function () { if (a === PHP.UNASSIGNED) { PHP.error = 'undefined $a'; return PHP.null; } else { return a;}})());&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="other-statements"&gt;Other statements&lt;/h1&gt;

&lt;h2 id="instanceof"&gt;Instanceof&lt;/h2&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;// full qualified class name, namespace are a
// compile time thing in php
PHP.instanceof = function (obj, class) {
   var fn;
   fn = function (meta) {
       if (meta == PHPCLASS[class]) {
           return true;
       }
       if (meta.extends === null) {
           return false;
       }
       return fn(meta.extends);
   };
   if (obj instanceof PHP.Object) {
       return fn(obj.meta);
   }
   return false;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="if-and-while"&gt;If and while&lt;/h2&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

if ($expr) {}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Transpile to:&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;if (PHP.to_bool(expr)) {}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="yield"&gt;Yield&lt;/h1&gt;

&lt;p&gt;Assume a function like so:&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

function fn() {
    $a = 1;
    $a++;
    yield $a;
    $a++;
    yield $a;
    $a++;
    yield $a;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The yield can be seen as a function that return at yield, and when call later will not start from the beginning of the function but from the last used yield. And also have the same state from last call.&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;PHPFunction.fn = function () {
return new PHP.Generator(function () {
    var position = 0;
    var a;

    var codes = [
        function () {
            // all the code for remove complexity in code analysis
            a = 1;
            a++;
            position = 0;
            return a;
            a++;
            position = 1;
            return a;
            a++;
            position = 2;
            return a;
        },
        function () {
            a++;
            position = 1;
            return a;
            a++;
            position = 2;
            return a;
        },
        function () {
            a++;
            position = 2;
            return a;
        }
    ];
    var end = false;
    
    return function () {
        if (end) return ;
        var result = codes[position].apply(this, arguments);
        end = (codes.length - 1) &amp;gt;= position;
        return result;
    };
}();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But what happen when we put a yield inside a loop:&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

function fn($datas) {
    stuffA();
    foreach ($datas as $data) {
        stuffB();
        yield $data;
        stuffC();
    }
    stuffD();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one is more hard, transform the foreach into a goto:&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

function fn($datas) {
    stuffA();
    $i = 0;
    begin_loop:
    if (isset($datas[$i])) {
        goto end_loop;
    }
    $data = $datas[$i];
    stuffB();
    yield $data;
    stuffC();
    $i++;
    goto begin_loop;
    end_loop:
    stuffD();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just convert the goto, but let the yield untreated.&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;PHP.Goto = function (name) {
    this.name = name;
};

var PHPFunction.fn = function (datas) {
return new PHP.Generator(function () {
    var that;
    var position = 0;

    var i;
    var data;
    
    var gotos = {
        'begin_loop': function () {
            if (PHP.isset(datas, i)) {
                return new PHP.Goto('end_loop');
            }
            data = PHP.array_access(datas, i);
            PHPFunction.stuffB();
            yield $data;
            PHPFunction.stuffC();
            i++;
            return new PHP.Goto('begin_loop');
            PHPFunction.stuffD();
        },
        'end_loop': function () {
            PHPFunction.stuffD();
        }
    };
        
    
    return function () {
        var trampoline = function () {
            PHPFunction.stuffA();
            i = 0;
            if (PHP.isset(datas, i)) {
                return new PHP.Goto('end_loop');
            }
            data = PHP.array_access(datas, i);
            PHPFunction.stuffB();
            yield $data;
            PHPFunction.stuffC();
            i++;
            return new PHP.Goto('begin_loop');
            PHPFunction.stuffD();
        };

        var go = true;
        do {
            trampoline = trampoline.call(that);
            if (trampoline instanceof PHP.Goto) {
                trampoline = gotos[trampoline.name];
            } else {
                go = false;
            }
        } while (go);

        return trampoline;
    };
})();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without the yield:&lt;/p&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;
PHP.Goto = function (name) {
    this.name = name;
};

var PHPFunction.fn = function (datas) {
    return new PHP.Generator(function () {
        var that;
        var position = 0;

        var i;
        var data;
        
        var gotos = {
            'begin_loop': function () {
                if (PHP.isset(datas, i)) {
                    return new PHP.Goto('end_loop');
                }
                data = PHP.array_access(datas, i);
                PHPFunction.stuffB();
                return data;
                PHPFunction.stuffC();
                i++;
                return new PHP.Goto('begin_loop');
                PHPFunction.stuffD();
            },
            'end_loop': function () {
                PHPFunction.stuffD();
            }
        };

        var codes = [
            function () {
                PHPFunction.stuffA();
                i = 0;
                if (PHP.isset(datas, i)) {
                    return new PHP.Goto('end_loop');
                }
                data = PHP.array_access(datas, i);
                PHPFunction.stuffB();
                position = 1;
                return new data;
                PHPFunction.stuffC();
                i++;
                return new PHP.Goto('begin_loop');
                PHPFunction.stuffD();
            },
            function () {
                PHPFunction.stuffC();
                i++;
                return new PHP.Goto('begin_loop');
                PHPFunction.stuffD();
            }
        ];
        
        return function () {
            var trampoline = codes[position];

            var go = true;
            do {
                trampoline = trampoline.call(that);
                if (trampoline instanceof PHP.Goto) {
                    trampoline = gotos[trampoline.name];
                } else {
                    go = false;
                }
            } while (go);

            return trampoline;
        };
    });
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="passing-arguments-by-address"&gt;Passing arguments by address&lt;/h1&gt;

&lt;p&gt;Wrap every arguments inside a Box for every call you can&amp;rsquo;t infer the signature of the function.&lt;/p&gt;

&lt;div class="brush: php"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;lt;?php

$a = array();
end($a);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;var PHP.Box = function (value) {
  this.value = value;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="brush: javascript"&gt;
 &lt;pre&gt;&lt;code&gt;var a = PHP.array();
var a_box = new PHP.Box(a);
PHPFunction.end(a_box);
a = a_box.value;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Heavy.&lt;/p&gt;

&lt;h2 id="unset"&gt;Unset&lt;/h2&gt;

&lt;p&gt;Easy PHP.UNASSIGNED is for.&lt;/p&gt;

&lt;h1 id="dont-took-into-account"&gt;Don&amp;rsquo;t took into account&lt;/h1&gt;

&lt;ol&gt;
 &lt;li&gt;Foreach&lt;/li&gt;
 &lt;li&gt;Break and continue&lt;/li&gt;
 &lt;li&gt;Anonymous Class&lt;/li&gt;
 &lt;li&gt;Autoload&lt;/li&gt;
 &lt;li&gt;Tick&lt;/li&gt;
 &lt;li&gt;Object reflection&lt;/li&gt;
 &lt;li&gt;Closure syntax&lt;/li&gt;
 &lt;li&gt;Resources&lt;/li&gt;
 &lt;li&gt;Trait (but a pure compile time mechanic)&lt;/li&gt;
 &lt;li&gt;Namespace (also a pure compile time mechanic)&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;And more.&lt;/p&gt;

&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s more complex than I would have thought in the first place. Minification seems to be feasible only on white space and on few PHP.{} name definition. The dead code elimination is impossible if the used function can&amp;rsquo;t be inferred from a static analysis (use call_user_function or &lt;code&gt;$this-&amp;gt;{$expr}()&lt;/code&gt; will forbid optimization) of the code is used, that will lead to heavyweight file. The constant need to convert thing in and out could also greatly decrease the performances and can&amp;rsquo;t be easily optimized like method calls.&lt;/p&gt;</description></item></channel></rss>